from modules.umbralizar import umbralizar_por_rango_opencv
from modules.leer_imagen_estandarizada import leer_imagen_estandarizada
from modules.obtener_banda_lab import obtener_banda_lab
from modules.contar_objetos_en_mascara import contar_objetos_en_mascara
from modules.dilatar_mascara import dilatar_mascara
from modules.restar_mascaras_binarias import restar_mascaras_binarias
from modules.erosionar_mascara import erosionar_mascara
from modules.segmentar_globulos_blancos_completos import segmentar_globulos_blancos_completos
from modules.eliminar_objetos_peque√±os import eliminar_objetos_peque√±os
from modules.separar_globulos_watershed import separar_globulos_watershed
from modules.contar_globulos_en_etiquetas import contar_globulos_en_etiquetas
from modules.cerrar_huecos_morfologicos import cerrar_huecos_morfologicos
from modules.aplicar_mediana_repetida import aplicar_mediana_repetida
from modules.separar_globulos_en_borde import separar_globulos_en_borde
from modules.mostrar_resultado_final import mostrar_resultado_final
from modules.datos_estadisticos import datos_estadisticos
from modules.umbral_adaptativo import umbral_adaptativo
from modules.umbral_otsu import umbral_otsu
from modules.separar_felzenszwalb import separar_felzenszwalb
from modules.cerrar_huecos_precisos import cerrar_huecos_precisos
from modules.cerrar_huecos_con_grietas import cerrar_huecos_con_grietas
from modules.cerrar_huecos_con_contornos import cerrar_huecos_con_contornos
from modules.cerrar_huecos_inteligente import cerrar_huecos_inteligente
from modules.guardar_mascaras_sanguineas import guardar_mascaras_sanguineas
from modules.procesar_carpeta_de_imagenes import procesar_carpeta_de_imagenes
import math

""" 
PROCESAMIENTO DIGITAL DE IM√ÅGENES 1
CURSADA PRIMER CUATRIMESTRE 2025
TRABAJO FINAL

PROBLEMA:
Conteo de componentes en an√°lisis de sangre.

OBJETIVO GENERAL:
Determinar la cantidad de gl√≥bulos rojos y blancos en im√°genes digitales de microscop√≠a √≥ptica.

OBJETIVOS ESPEC√çFICOS:
1_ Establecer y definir digitalmente los patrones visuales que permiten identificar gl√≥bulos rojos y blancos.
2_ Determinar en una imagen la cantidad de gl√≥bulos rojos.
3_ Determinar la existencia de gl√≥bulos blancos.
4_ Si existen gl√≥bulos blancos, analizar si corresponde a un linfocito, en base a su n√∫cleo.

---

üîç 1. Definici√≥n digital de patrones visuales

Se identificaron caracter√≠sticas distintivas para poder separar los gl√≥bulos rojos y blancos:

ü©∏ Gl√≥bulos Rojos:
- Forma: circular, centro m√°s claro, contorno marcado (aspecto de dona).
- Textura: uniforme.
- Color: rosado en RGB, bien contrastado en el canal **L de LAB** (luminancia).

‚ö™ Gl√≥bulos Blancos:
- Tama√±o mayor.
- Forma irregular, n√∫cleo morado visible.
- Textura interna.
- El **canal B del espacio LAB** permite resaltar el n√∫cleo, facilitando su detecci√≥n sin confundirlo con plaquetas.

---

‚öôÔ∏è 2. Estrategia de procesamiento

El siguiente flujo de trabajo fue implementado para detectar y contar correctamente los gl√≥bulos:

**Paso 1: Lectura de la imagen y conversi√≥n a LAB**
- Se convierte la imagen a espacio de color LAB.
- Se extraen dos bandas:
  - Canal L (luminancia) para gl√≥bulos rojos.
  - Canal B para gl√≥bulos blancos.

**Paso 2: Suavizado (filtro de mediana aplicado m√∫ltiples veces)**
- Se utiliza el filtro de mediana para eliminar ruido sin perder bordes.
- Se aplica 3 veces sobre gl√≥bulos rojos y 2 sobre blancos.

**Paso 3: Umbralizaci√≥n por rango (threshold por canal)**
- Se define un rango para obtener una m√°scara binaria para cada tipo celular.
- En el caso de los gl√≥bulos rojos, se invierte la m√°scara.

**Paso 4: Segmentaci√≥n de gl√≥bulos blancos completos**
- A partir de su n√∫cleo, se expande la regi√≥n para incluir el citoplasma.
- Se utiliza tolerancia de intensidad para evitar incluir c√©lulas vecinas.

**Paso 5: Cierre morfol√≥gico + dilataci√≥n**
- Se cierran huecos internos del gl√≥bulo blanco.
- Se dilata la m√°scara para asegurar cobertura completa.

**Paso 6: Eliminaci√≥n del gl√≥bulo blanco de la m√°scara de rojos**
- Se hace una resta entre la m√°scara de gl√≥bulos rojos y blancos.

Paso 7: Limpieza de objetos no relevantes
- Se eliminan objetos demasiado peque√±os para ser gl√≥bulos reales.

Paso 8: Separaci√≥n de gl√≥bulos en bordes vs interior
- Se detectan los gl√≥bulos que tocan el borde de la imagen.
- Se separan para evitar errores de segmentaci√≥n.

Paso 9: Watershed sobre gl√≥bulos rojos internos
- Se aplica transformada de distancia y detecci√≥n de m√°ximos locales.
- Watershed permite separar c√©lulas que est√°n pegadas.
- Solo se aplica a gl√≥bulos internos para evitar errores en los bordes.

Paso 10: Conteo y visualizaci√≥n final
- Se cuenta por separado:
    Gl√≥bulos rojos internos (por watershed).
    Gl√≥bulos en los bordes.
    Gl√≥bulos blancos.

- Se genera una visualizaci√≥n final con bordes de color para cada tipo:
    üî¥ Rojo: gl√≥bulos rojos.
    üîµ Azul: gl√≥bulos blancos.
---

‚úÖ Resultado Final:
- Gl√≥bulos rojos separados, incluso si estaban pegados.
- Gl√≥bulos blancos completos, sin incluir n√∫cleos aislados ni ruido.
- Imagen final con bordes coloreados y conteo preciso por tipo.
"""

""" # Rutas de im√°genes
ruta_local = "Tareas/Proyecto final - Elias Uribe/images/image-83.png"

# Paso 1: Leo la imagen
imagen = leer_imagen_estandarizada(ruta_local)

# Paso 2: Obtengo las bandas que resaltan mejor lo que busco
banda_globulos_rojos = obtener_banda_lab(imagen, 'L')  # Luminancia para gl√≥bulos rojos
banda_globulos_blancos = obtener_banda_lab(imagen, 'B')  # Canal B para n√∫cleo de gl√≥bulos blancos

# Paso 3: Aplico el filtro de la mediana para reducir el ruido y nivelar un poco los colores
img_glogulos_rojos_suavizada = aplicar_mediana_repetida(banda_globulos_rojos, radio=6, repeticiones=3)
img_glogulos_blancos_suavizada = aplicar_mediana_repetida(banda_globulos_blancos, radio=6, repeticiones=1)

media_L, std_L = datos_estadisticos(img_glogulos_rojos_suavizada)
media_B, std_B = datos_estadisticos(img_glogulos_blancos_suavizada)
 """
""" # Paso 4: Obtengo las respectivas mascaras con un umbral por un rango espec√≠fico para cada globulo 
mascara_binaria_globulos_rojos = umbralizar_por_rango_opencv(img_glogulos_rojos_suavizada, math.trunc(media_L - std_L), math.trunc(media_L + std_L), invertir=True)
mascara_binaria_globulos_blancos = umbralizar_por_rango_opencv(img_glogulos_blancos_suavizada, umbral_min=0, umbral_max=135)

umbral_adapt_globulo_rojo = umbral_adaptativo(img_glogulos_rojos_suavizada, bloque=15, C=3)
umbral_adapt_globulo_blanco = umbral_adaptativo(img_glogulos_blancos_suavizada, bloque=61, C=4)
 """
""" mascara_rojos, umbral_globulo_rojo = umbral_otsu(img_glogulos_rojos_suavizada, invertir=True)
mascara_blancos, umbral_globulo_blanco = umbral_otsu(img_glogulos_blancos_suavizada, invertir=True)

# Paso 5: Segmento los gl√≥bulos blancos completos (n√∫cleo + citoplasma)
mascara_globulos_blancos_completos = segmentar_globulos_blancos_completos(
    img_glogulos_blancos_suavizada,
    mascara_blancos,
    tolerancia=std_B+(std_B/2),
    mostrar=True
)

# Paso 6: Erosionar la m√°scara para eliminar peque√±as irregularidades
mascara_erosionada = erosionar_mascara(mascara_rojos, kernel_size=3, iteraciones=4)

# Paso 7: Dilalar mascara de los gl√≥bulos blancos para mejorar la segmentaci√≥n
mascara_globulos_blancos_dilatada = dilatar_mascara(mascara_globulos_blancos_completos, kernel_size=3, iteraciones=10)

# Paso 8: Cierre morfol√≥gico para evitar huecos en gl√≥bulos blancos
mascara_globulos_blancos_cerrada = cerrar_huecos_morfologicos(mascara_globulos_blancos_dilatada, kernel_size=51, mostrar=True)

# Paso 9: Quito los gl√≥bulos blancos de la m√°scara de gl√≥bulos rojos (resto las mascaras)
mascara_globulos_rojos_sin_blanco = restar_mascaras_binarias(mascara_erosionada, mascara_globulos_blancos_cerrada)

# Paso 10: Elimino objetos peque√±os que no son gl√≥bulos rojos
mascara_globulos_rojos_limpia = eliminar_objetos_peque√±os(mascara_globulos_rojos_sin_blanco, min_pixeles=80)

mascara_globulos_rojos_cerrada = cerrar_huecos_precisos(mascara_globulos_rojos_limpia, mostrar=True)
#mascara_globulos_rojos_cerrada = cerrar_huecos_con_grietas(mascara_globulos_rojos_limpia, kernel_size=23)
# No funciona bien con grietas, pero si con huecos internos, ya que deberia dilar las celulas, pero el tema es de dependiendo
# el valor del kernel_size, se agranda la celula, y se termina uniendo con otras

#mascara_globulos_rojos_cerrada = cerrar_huecos_inteligente(mascara_globulos_rojos_limpia, erosion_iter=65)
# Funciona bien, pero no me soluciona el tema de los huecos que no estan totalmente rodeados por el borde de la celula
# para esto me quedo con la funcion cerrar_huecos_precisos """

""" guardar_mascaras_sanguineas(
    mascara_rojos=mascara_globulos_rojos_cerrada,
    mascara_blancos=mascara_globulos_blancos_cerrada,
    nombre_base="4",
    carpeta_destino="data/masks/"
)
 """
""" # Paso 11: Separo los gl√≥bulos en borde y en interior, los gl√≤bulos del borde no ser√°n procesados por watershed
mascara_interior, mascara_borde = separar_globulos_en_borde(mascara_globulos_rojos_cerrada, mostrar=True)

# Paso 12:  Aplico watershed a gl√≥bulos internos para separar pegados
etiquetas_interior = separar_globulos_watershed(mascara_interior, min_pixeles=80, min_distance=10, mostrar=True)
 """
""" Probar alguna otro alterneativo a watershed, como por ejemplo: Quickshift, MeanShift, Felzenszwalb, etc. """
#etiquetas_interior = separar_felzenszwalb(mascara_interior, mostrar=True)

# Paso 13: Conteo total de gl√≥bulos rojos
""" cantidad_interior = contar_globulos_en_etiquetas(etiquetas_interior)
cantidad_borde = contar_objetos_en_mascara(mascara_borde)
cantidad_globulos_rojos = cantidad_interior + cantidad_borde
print(f"üî¥ Gl√≥bulos rojos detectados: {cantidad_globulos_rojos}")

# Paso 14: Conteo de gl√≥bulos blancos
cantidad_globulos_blancos = contar_objetos_en_mascara(mascara_globulos_blancos_cerrada)
print(f"‚ö™ Gl√≥bulos blancos detectados: {cantidad_globulos_blancos}")

mascara_globulos_blancos_contorno = cerrar_huecos_morfologicos(mascara_globulos_blancos_completos, kernel_size=51, mostrar=True)

# Mostrar imagen final
mostrar_resultado_final(
    imagen_original=imagen,
    etiquetas_rojos=etiquetas_interior,
    mascara_borde_rojos=mascara_borde,
    mascara_blancos=mascara_globulos_blancos_contorno
) """



procesar_carpeta_de_imagenes(
    carpeta_entrada="Tareas\Proyecto final - Elias Uribe\images\dataset-master\dataset-master\JPEGImages",
    carpeta_salida="data/masks/"
)
